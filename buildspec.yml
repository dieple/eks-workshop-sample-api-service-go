---
version: 0.2
phases:
  install:
    runtime-versions:
      golang: 1.12
    commands:
      - echo [PHASE] Entered the install phase...
      - cat /codebuild/output/tmp/script.sh
      - nohup /usr/local/bin/dockerd --host=unix:///var/run/docker.sock --host=tcp://127.0.0.1:2375 --storage-driver=overlay2&
      - timeout 15 sh -c "until docker info; do echo .; sleep 1; done"
      - curl -sS -o aws-iam-authenticator https://amazon-eks.s3-us-west-2.amazonaws.com/1.10.3/2018-07-26/bin/linux/amd64/aws-iam-authenticator
      - curl -sS -o kubectl https://amazon-eks.s3-us-west-2.amazonaws.com/1.10.3/2018-07-26/bin/linux/amd64/kubectl
      - chmod +x ./kubectl ./aws-iam-authenticator
      - export PATH=$PWD/:$PATH
      - apt-get update && apt-get -y install tree jq python3-pip python3-dev && pip3 install --upgrade awscli
  pre_build:
      commands:
        - echo [PHASE] Entered the pre_build phase...
        - TAG=${GITHUB_REPO_NAME}_${GITHUB_REPO_BRANCH}_${STAGE}_$(date +%Y-%m-%d.%H.%M.%S)
        - sed -i 's@CONTAINER_IMAGE@'${ECR_REPO_URI}:${TAG}'@' hello-k8s.yml
        - $(aws ecr get-login --no-include-email)
        - tree $HOME
        - export KUBECONFIG=$HOME/.kube/config
  build:
    commands:
      - echo [PHASE] Entered the build phase...
      - docker build --tag $ECR_REPO_URI:$TAG .

  post_build:
    commands:
      - docker push $ECR_REPO_URI:$TAG
      - CREDENTIALS=$(aws sts assume-role --role-arn $EKS_KUBECTL_ROLE_ARN --role-session-name codebuild-kubectl --duration-seconds 900)
      - echo ${CREDENTIALS}
      - export AWS_ACCESS_KEY_ID="$(echo ${CREDENTIALS} | jq -r '.Credentials.AccessKeyId')"
      - export AWS_SECRET_ACCESS_KEY="$(echo ${CREDENTIALS} | jq -r '.Credentials.SecretAccessKey')"
      - export AWS_SESSION_TOKEN="$(echo ${CREDENTIALS} | jq -r '.Credentials.SessionToken')"
      - export AWS_EXPIRATION=$(echo ${CREDENTIALS} | jq -r '.Credentials.Expiration')
      - echo [PHASE] Entered the post_build phase...
      - env | grep AWS
      - aws eks update-kubeconfig --name $EKS_CLUSTER_NAME
      - kubectl apply -f hello-k8s.yml
      - printf '[{"name":"hello-k8s","imageUri":"%s"}]' $ECR_REPO_URI:$TAG > build.json
artifacts:
  files: build.json
